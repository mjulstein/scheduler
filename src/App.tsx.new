// App.tsx - Main application component
import { useState, useEffect, useRef, useCallback } from 'react';
import './App.css';
import { DayData, DayItem } from './Types';
import { getStateFromUrl, updateUrlWithState } from './urlState';
import { formatISODate, getMondayOfWeek, isToday } from './dateUtils';
import { WeekNavigation } from './components/WeekNavigation';
import { DayCard } from './components/DayCard';
import { RichTextSection } from './components/RichTextSection';

/**
 * Main application component
 */
export const App = () => {
  // Initialize state from URL or use defaults
  const urlState = getStateFromUrl();

  const [weekDays, setWeekDays] = useState<DayData[]>([]);
  const [newItems, setNewItems] = useState<{ [key: string]: string }>({});
  const [weekOffset, setWeekOffset] = useState<number>(urlState?.weekOffset || 0);
  const [showWeekends, setShowWeekends] = useState<boolean>(urlState?.showWeekends || false);
  const itemsRef = useRef<{ [date: string]: DayItem[] }>(urlState?.items || {});

  // Update URL with state whenever relevant state changes
  useEffect(() => {
    const state = {
      weekOffset,
      showWeekends,
      items: itemsRef.current
    };
    updateUrlWithState(state);
  }, [weekOffset, showWeekends]);

  // Generate days based on weekOffset and showWeekends
  useEffect(() => {
    // Generate the week's days based on weekOffset
    const today = new Date();
    const todayISODate = formatISODate(today);
    const monday = getMondayOfWeek(today, weekOffset);

    const days: DayData[] = [];

    for (let i = 0; i < 7; i++) {
      const date = new Date(monday);
      date.setDate(monday.getDate() + i);

      const isoDate = formatISODate(date);
      const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });
      const dayOfWeek = date.getDay(); // 0 is Sunday, 6 is Saturday

      // Skip weekends if showWeekends is false
      if (!showWeekends && (dayOfWeek === 0 || dayOfWeek === 6)) {
        continue;
      }

      // Use items from ref if they exist
      const items = itemsRef.current[isoDate] || [];

      days.push({
        date: isoDate,
        dayName,
        items,
        isToday: isoDate === todayISODate
      });

      // Initialize newItems state if not already set
      setNewItems(prev => ({
        ...prev,
        [isoDate]: prev[isoDate] || ''
      }));
    }

    // Reverse the order of days
    setWeekDays(days.reverse());
  }, [weekOffset, showWeekends]);

  const handleAddItem = (dayDate: string) => {
    if (newItems[dayDate].trim() === '') return;

    // Create the new item
    const newItem = { id: Date.now().toString(), text: newItems[dayDate] };

    // Update the ref with the new item
    const currentItems = itemsRef.current[dayDate] || [];
    itemsRef.current[dayDate] = [...currentItems, newItem];

    // Update the state
    setWeekDays(prevDays => 
      prevDays.map(day => {
        if (day.date === dayDate) {
          return {
            ...day,
            items: itemsRef.current[dayDate]
          };
        }
        return day;
      })
    );

    // Clear the input
    setNewItems(prev => ({
      ...prev,
      [dayDate]: ''
    }));

    // Update URL with the new state
    const state = {
      weekOffset,
      showWeekends,
      items: itemsRef.current
    };
    updateUrlWithState(state);

    // Focus on the input field after adding an item
    // This is optional but provides better UX
    setTimeout(() => {
      const inputs = document.querySelectorAll(`input[value=""]`);
      if (inputs.length > 0) {
        (inputs[0] as HTMLInputElement).focus();
      }
    }, 0);
  };

  const handleInputChange = (dayDate: string, value: string) => {
    setNewItems(prev => ({
      ...prev,
      [dayDate]: value
    }));
  };

  const generateRichText = useCallback(() => {
    // Get all days for the current week, including weekends for rich text
    const today = new Date();
    const monday = getMondayOfWeek(today, weekOffset);

    // Array to collect day content
    const dayContents = [];

    // Generate all days for rich text
    for (let i = 0; i < 7; i++) {
      const date = new Date(monday);
      date.setDate(monday.getDate() + i);

      const isoDate = formatISODate(date);
      const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });
      const dayOfWeek = date.getDay(); // 0 is Sunday, 6 is Saturday

      // Skip weekends in rich text if showWeekends is false
      if (!showWeekends && (dayOfWeek === 0 || dayOfWeek === 6)) {
        continue;
      }

      // Use items from ref if they exist
      const items = itemsRef.current[isoDate] || [];

      let dayContent = `<h3>${isoDate} ${dayName}</h3>\n<ul>\n`;

      if (items.length === 0) {
        dayContent += '  <li></li>\n';
      } else {
        items.forEach(item => {
          dayContent += `  <li>${item.text}</li>\n`;
        });
      }

      dayContent += '</ul>\n\n';
      dayContents.push(dayContent);
    }

    // Reverse the order of days and join them
    return dayContents.reverse().join('');
  }, [weekOffset, showWeekends]);

  return (
    <div className="app-container">
      <h1>Weekly Planner</h1>

      <div className="content-container">
        <div className="days-list">
          <WeekNavigation
            weekOffset={weekOffset}
            setWeekOffset={setWeekOffset}
            showWeekends={showWeekends}
            setShowWeekends={setShowWeekends}
            firstDayDate={weekDays.length > 0 ? weekDays[0].date : ''}
          />
          
          {weekDays.map(day => (
            <DayCard
              key={day.date}
              day={day}
              newItemText={newItems[day.date] || ''}
              onInputChange={handleInputChange}
              onAddItem={handleAddItem}
            />
          ))}
        </div>

        <RichTextSection richTextContent={generateRichText()} />
      </div>
    </div>
  );
};